package com.cntt.exam.exam_structure_service.service;

import java.io.InputStream;
import java.util.List;

import org.springframework.stereotype.Service;

import com.cntt.exam.exam_structure_service.model.ExamStructure;
import com.cntt.exam.exam_structure_service.repository.ExamStructureRepository;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.properties.TextAlignment;
import com.itextpdf.layout.properties.UnitValue;
import com.itextpdf.io.source.ByteArrayOutputStream;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.AreaBreak;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.kernel.font.PdfFont;
import com.itextpdf.kernel.font.PdfFontFactory;
import com.itextpdf.io.font.PdfEncodings;

import org.apache.poi.xwpf.usermodel.*;

@Service
public class ExamStructureServiceImpl implements ExamStructureService {
    private final ExamStructureRepository eRepository;

    public ExamStructureServiceImpl(ExamStructureRepository eRepository) {
        this.eRepository = eRepository;
    }

    @Override
    public ExamStructure addExamStructure(ExamStructure examStructure) {
        return eRepository.save(examStructure);
    }

    @Override
    public List<ExamStructure> getAll() {
        return eRepository.findAll();
    }

    @Override
    public List<ExamStructure> getBySemester(int semester, String year) {
        return eRepository.findBySemesterAndAcademicYear(semester, year);
    }

    @Override
    public ExamStructure updateExamStructure(Long id, ExamStructure newStructure) {
        ExamStructure e = eRepository.findById(id).orElseThrow();
        e.setSubjectName(newStructure.getSubjectName());
        e.setSubjectCode(newStructure.getSubjectCode());
        e.setExamType(newStructure.getExamType());
        e.setSemester(newStructure.getSemester());
        e.setAcademicYear(newStructure.getAcademicYear());
        e.setDifficultyLevel(newStructure.getDifficultyLevel());
        e.setStructureDescription(newStructure.getStructureDescription());
        return eRepository.save(e);
    }

    @Override
    public void deleteExamStructure(Long id) {
        eRepository.deleteById(id);
    }

    @Override
    public byte[] generateReportPdf(int semester, String academicYear) {

        String fontPath = "src/main/resources/fonts/times.ttf";
        ByteArrayOutputStream out = new ByteArrayOutputStream();

        try {
            PdfWriter writer = new PdfWriter(out);
            PdfDocument pdfDoc = new PdfDocument(writer);
            Document doc = new Document(pdfDoc);

            // T·∫°o font v·ªõi pdfDoc
            PdfFont font = PdfFontFactory.createFont(fontPath, PdfEncodings.IDENTITY_H, pdfDoc);
            doc.setFont(font);

            // L·∫•y d·ªØ li·ªáu c·∫•u tr√∫c ƒë·ªÅ thi
            List<ExamStructure> structures = eRepository.findBySemesterAndAcademicYear(semester, academicYear);

            // Th√™m n·ªôi dung cho file PDF
            doc.add(new Paragraph("B√ÅO C√ÅO C·∫§U TR√öC ƒê·ªÄ THI").setBold().setFontSize(16));
            doc.add(new Paragraph("H·ªçc k·ª≥: " + semester));
            doc.add(new Paragraph("NƒÉm h·ªçc: " + academicYear));
            doc.add(new Paragraph("T·ªïng s·ªë c·∫•u tr√∫c: " + structures.size()));
            doc.add(new Paragraph("\n"));

            Table table = new Table(6).useAllAvailableWidth();
            table.addHeaderCell("STT");
            table.addHeaderCell("M√¥n h·ªçc");
            table.addHeaderCell("M√£ m√¥n");
            table.addHeaderCell("H√¨nh th·ª©c thi");
            table.addHeaderCell("M·ª©c ƒë·ªô");
            table.addHeaderCell("M√¥ t·∫£");

            int index = 1;
            for (ExamStructure s : structures) {
                table.addCell(String.valueOf(index++));
                table.addCell(s.getSubjectName());
                table.addCell(s.getSubjectCode());
                table.addCell(s.getExamType());
                table.addCell(s.getDifficultyLevel());
                table.addCell(s.getStructureDescription());
            }

            doc.add(table);
            doc.close();

        } catch (Exception e) {
            e.printStackTrace();
            // N·∫øu mu·ªën c√≥ th·ªÉ x·ª≠ l√Ω ho·∫∑c n√©m l·ªói l√™n tr√™n
        }

        return out.toByteArray();
    }

    @Override
    public ExamStructure getById(Long id) {
        return eRepository.findById(id).orElse(null);
    }

    @Override
    public byte[] generateAllStructuresPdf() {
        List<ExamStructure> structures = eRepository.findAll();

        try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {
            PdfWriter writer = new PdfWriter(out);
            PdfDocument pdf = new PdfDocument(writer);

            // ‚ö†Ô∏è Fix: Kh√¥ng kh·ªüi t·∫°o Document 2 l·∫ßn
            Document document;

            // üëá Load font Unicode ti·∫øng Vi·ªát t·ª´ resources/fonts/times.ttf
            InputStream fontStream = getClass().getClassLoader().getResourceAsStream("fonts/times.ttf");
            if (fontStream == null)
                throw new RuntimeException("Kh√¥ng t√¨m th·∫•y file font times.ttf trong /resources/fonts/");
            byte[] fontBytes = fontStream.readAllBytes();
            com.itextpdf.io.font.FontProgram fontProgram = com.itextpdf.io.font.FontProgramFactory
                    .createFont(fontBytes);
            PdfFont font = PdfFontFactory.createFont(fontProgram, PdfEncodings.IDENTITY_H);

            document = new Document(pdf);
            document.setFont(font); // √°p d·ª•ng font Unicode ti·∫øng Vi·ªát

            for (ExamStructure s : structures) {
                // Qu·ªëc hi·ªáu, ti√™u ng·ªØ
                document.add(new Paragraph("C·ªòNG H√íA X√É H·ªòI CH·ª¶ NGHƒ®A VI·ªÜT NAM")
                        .setBold().setTextAlignment(TextAlignment.CENTER));
                document.add(new Paragraph("ƒê·ªôc l·∫≠p ‚Äì T·ª± do ‚Äì H·∫°nh ph√∫c")
                        .setItalic().setTextAlignment(TextAlignment.CENTER).setMarginBottom(10));

                // Khoa v√† b·ªô m√¥n
                document.add(new Paragraph("KHOA ƒêI·ªÜN T·ª¨").setBold());
                document.add(new Paragraph("B·ªò M√îN: CNTT").setBold().setMarginBottom(10));

                // Ti√™u ƒë·ªÅ
                document.add(new Paragraph("B·∫¢NG C·∫§U TR√öC ƒê·ªÄ THI K·∫æT TH√öC H·ªåC PH·∫¶N")
                        .setBold().setFontSize(14).setTextAlignment(TextAlignment.CENTER).setMarginBottom(15));

                // Th√¥ng tin h·ªçc ph·∫ßn
                document.add(new Paragraph(
                        "T√™n h·ªçc ph·∫ßn: " + s.getSubjectName() + "   ;   M√£ h·ªçc ph·∫ßn: " + s.getSubjectCode()));
                document.add(new Paragraph("S·ªë t√≠n ch·ªâ: " + (s.getCredit() != null ? s.getCredit() : "3")
                        + "        H√¨nh th·ª©c thi: " + s.getExamType()));
                document.add(new Paragraph("Th·ªùi gian l√†m b√†i: " + s.getDuration() + " ph√∫t"));
                document.add(new Paragraph("H·ªçc k·ª≥: " + s.getSemester() + "        NƒÉm h·ªçc: " + s.getAcademicYear())
                        .setMarginBottom(15));

                // M·ª•c I: C·∫•u tr√∫c ƒë·ªÅ thi
                document.add(new Paragraph("I. C·∫§U TR√öC ƒê·ªÄ THI:").setBold());

                Table table = new Table(UnitValue.createPercentArray(new float[] { 1, 3, 2, 2, 2, 2, 2 }))
                        .useAllAvailableWidth();

                table.addHeaderCell(new Cell().add(new Paragraph("STT").setBold()));
                table.addHeaderCell(new Cell().add(new Paragraph("C√¢u h·ªèi").setBold()));
                table.addHeaderCell(new Cell().add(new Paragraph("Nh·ªõ").setBold()));
                table.addHeaderCell(new Cell().add(new Paragraph("Hi·ªÉu").setBold()));
                table.addHeaderCell(new Cell().add(new Paragraph("V·∫≠n d·ª•ng").setBold()));
                table.addHeaderCell(new Cell().add(new Paragraph("Ph√¢n t√≠ch").setBold()));
                table.addHeaderCell(new Cell().add(new Paragraph("S√°ng t·∫°o").setBold()));

                // Ph√¢n t√≠ch c√¢u h·ªèi t·ª´ structureDescription
                String[] questions = s.getStructureDescription().split("\\r?\\n|\\.");
                int stt = 1;
                for (String q : questions) {
                    if (q.trim().isEmpty())
                        continue;

                    table.addCell(String.valueOf(stt++));
                    table.addCell(new Paragraph(q.trim()));
                    table.addCell(q.toLowerCase().contains("nh·ªõ") ? "x" : "");
                    table.addCell(q.toLowerCase().contains("hi·ªÉu") ? "x" : "");
                    table.addCell(q.toLowerCase().contains("v·∫≠n d·ª•ng") ? "x" : "");
                    table.addCell(q.toLowerCase().contains("ph√¢n t√≠ch") ? "x" : "");
                    table.addCell(q.toLowerCase().contains("s√°ng t·∫°o") ? "x" : "");
                }

                document.add(table);

                // M·ª•c II. N·ªôi dung
                document.add(new Paragraph("\nII. N·ªòI DUNG").setBold().setMarginTop(10));
                document.add(new Paragraph("ƒê·ªÅ thi g·ªìm " + (stt - 1) + " c√¢u/ph·∫ßn, ph√¢n b·ªë nh∆∞ sau:"));
                for (int i = 0; i < questions.length; i++) {
                    if (questions[i].trim().isEmpty())
                        continue;
                    document.add(new Paragraph("C√¢u " + (i + 1) + ": " + questions[i].trim()));
                }

                // Ng√†y th√°ng, ch·ªØ k√Ω
                document.add(new Paragraph("\n\nTh√°i Nguy√™n, ng√†y ... th√°ng ... nƒÉm 2024")
                        .setTextAlignment(TextAlignment.RIGHT));
                document.add(new Paragraph("P. TR∆Ø·ªûNG B·ªò M√îN").setBold()
                        .setTextAlignment(TextAlignment.RIGHT).setMarginBottom(30));
                document.add(new Paragraph("TS. Nghi√™m VƒÉn T√≠nh").setTextAlignment(TextAlignment.RIGHT));

                document.add(new AreaBreak()); // Xu·ªëng trang m·ªõi
            }

            document.close();
            return out.toByteArray();

        } catch (Exception e) {
            e.printStackTrace();
            return new byte[0];
        }
    }

    @Override
    public byte[] exportAllStructuresAsWord() {
        List<ExamStructure> structures = eRepository.findAll();

        try (XWPFDocument doc = new XWPFDocument(); ByteArrayOutputStream out = new ByteArrayOutputStream()) {

            for (ExamStructure s : structures) {
                // Qu·ªëc hi·ªáu ‚Äì ti√™u ng·ªØ
                XWPFParagraph heading = doc.createParagraph();
                heading.setAlignment(ParagraphAlignment.CENTER);
                XWPFRun run = heading.createRun();
                run.setBold(true);
                run.setText("C·ªòNG H√íA X√É H·ªòI CH·ª¶ NGHƒ®A VI·ªÜT NAM");
                run.addBreak();
                run.setText("ƒê·ªôc l·∫≠p ‚Äì T·ª± do ‚Äì H·∫°nh ph√∫c");
                run.addBreak();
                run.addBreak();

                // Th√¥ng tin chung
                XWPFParagraph info = doc.createParagraph();
                info.setAlignment(ParagraphAlignment.LEFT);
                XWPFRun run2 = info.createRun();
                run2.setText("KHOA ƒêI·ªÜN T·ª¨");
                run2.addBreak();
                run2.setText("B·ªò M√îN: CNTT");
                run2.addBreak();
                run2.addBreak();
                run2.setBold(true);
                run2.setText("B·∫¢NG C·∫§U TR√öC ƒê·ªÄ THI K·∫æT TH√öC H·ªåC PH·∫¶N");
                run2.addBreak();
                run2.setBold(false);
                run2.setText("T√™n h·ªçc ph·∫ßn: " + s.getSubjectName() + "   ;   M√£ h·ªçc ph·∫ßn: " + s.getSubjectCode());
                run2.addBreak();
                run2.setText("S·ªë t√≠n ch·ªâ: " + s.getCredit() + "   ;   H√¨nh th·ª©c thi: " + s.getExamType());
                run2.addBreak();
                run2.setText("Th·ªùi gian l√†m b√†i: " + s.getDuration() + " ph√∫t");
                run2.addBreak();
                run2.setText("H·ªçc k·ª≥: " + s.getSemester() + " ; NƒÉm h·ªçc: " + s.getAcademicYear());
                run2.addBreak();
                run2.addBreak();

                // Ti√™u ƒë·ªÅ b·∫£ng
                XWPFParagraph tableTitle = doc.createParagraph();
                XWPFRun run3 = tableTitle.createRun();
                run3.setText("I. C·∫§U TR√öC ƒê·ªÄ THI:");
                run3.setBold(true);
                run3.addBreak();

                // B·∫£ng c√¢u h·ªèi
                XWPFTable table = doc.createTable();
                XWPFTableRow header = table.getRow(0);
                header.getCell(0).setText("STT");
                header.addNewTableCell().setText("C√¢u h·ªèi");
                header.addNewTableCell().setText("Nh·ªõ");
                header.addNewTableCell().setText("Hi·ªÉu");
                header.addNewTableCell().setText("V·∫≠n d·ª•ng");
                header.addNewTableCell().setText("Ph√¢n t√≠ch");
                header.addNewTableCell().setText("S√°ng t·∫°o");

                String[] questions = s.getStructureDescription().split("\\r?\\n|\\.");
                int stt = 1;
                for (String q : questions) {
                    if (q.trim().isEmpty())
                        continue;
                    XWPFTableRow row = table.createRow();
                    row.getCell(0).setText(String.valueOf(stt++));
                    row.getCell(1).setText(q.trim());
                    row.getCell(2).setText(q.toLowerCase().contains("nh·ªõ") ? "x" : "");
                    row.getCell(3).setText(q.toLowerCase().contains("hi·ªÉu") ? "x" : "");
                    row.getCell(4).setText(q.toLowerCase().contains("v·∫≠n d·ª•ng") ? "x" : "");
                    row.getCell(5).setText(q.toLowerCase().contains("ph√¢n t√≠ch") ? "x" : "");
                    row.getCell(6).setText(q.toLowerCase().contains("s√°ng t·∫°o") ? "x" : "");
                }

                // M·ª•c II
                XWPFParagraph contentTitle = doc.createParagraph();
                contentTitle.setSpacingBefore(500);
                XWPFRun contentRun = contentTitle.createRun();
                contentRun.setText("\nII. N·ªòI DUNG");
                contentRun.setBold(true);
                contentRun.addBreak();
                contentRun.setText("ƒê·ªÅ thi g·ªìm " + (stt - 1) + " c√¢u/ph·∫ßn, ph√¢n b·ªë nh∆∞ sau:");
                contentRun.addBreak();

                for (int i = 0; i < questions.length; i++) {
                    if (questions[i].trim().isEmpty())
                        continue;
                    contentRun.setText("C√¢u " + (i + 1) + ": " + questions[i].trim());
                    contentRun.addBreak();
                }

                // Ch·ªØ k√Ω
                XWPFParagraph sign = doc.createParagraph();
                sign.setAlignment(ParagraphAlignment.RIGHT);
                XWPFRun signRun = sign.createRun();
                signRun.addBreak();
                signRun.addBreak();
                signRun.setText("Th√°i Nguy√™n, ng√†y ... th√°ng ... nƒÉm 2024");
                signRun.addBreak();
                signRun.setText("P. TR∆Ø·ªûNG B·ªò M√îN");
                signRun.setBold(true);
                signRun.addBreak();
                signRun.addBreak();
                signRun.setBold(false);
                signRun.setText("TS. Nghi√™m VƒÉn T√≠nh");

                // Trang m·ªõi
                doc.createParagraph().setPageBreak(true);
            }

            doc.write(out);
            return out.toByteArray();

        } catch (Exception e) {
            e.printStackTrace();
            return new byte[0];
        }

    }

}
